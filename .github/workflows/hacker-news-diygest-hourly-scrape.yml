name: Hacker News DIYgest Hourly Scrape

env:
  TARGET_HOUR: "08" # Bangkok Time
  TARGET_HOUR_UTC: 1
  PSQLURL: ${{ secrets.PSQLURL }}
  # must insert manually in cron below.

on:
  workflow_dispatch:
    inputs:
      send-email:
        description: Force send email on this run?
        default: "no thanks"
        type: choice
        options:
          - "yes please"
          - "no thanks"
      debugging:
        description: Enable remote debugging?
        default: "no thanks"
        type: choice
        options:
          - "yes please"
          - "no thanks"

  schedule:
    - cron: "15,30,45 1 * * *"
    - cron: "0 * * * *"

jobs:
  Hacker-News-DIYgest-Hourly-Scrape:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch database and sent.yml
        env:
          ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
        run: |
           # create an empty sent file...
           echo "sent: never" > sent.yml

           # fetch the database and yml from artifact.zip
           gh auth login --with-token <<<"$ACCESS_TOKEN"
           asset=$(gh api /repos/codefodder/hacker-news-digest/actions/artifacts --jq ".artifacts[0] .archive_download_url")
           curl -L -s -o artifact.zip "$asset" \
           -H "Accept: application/vnd.github.v3+json" \
           -H "Authorization: Bearer $ACCESS_TOKEN"
           unzip -o artifact.zip

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Install markdown
        run: sudo apt-get update && sudo apt-get install -y markdown

      - name: Install PostgreSQL client
        run: sudo apt-get update && sudo apt-get install -y postgresql-client

      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: 1.17

      - name: Install mustache-cli
        run: go install github.com/cbroglie/mustache/cmd/mustache@latest

      - name: Setup tmate session
        if: inputs.debugging == 'yes please' && github.event_name == 'workflow_dispatch'
        uses: mxschmitt/action-tmate@v3
        with:
          timeout-minutes: 1
          limit-access-to-actor: true

      - name: Scrape
        run: bin/hn-hourly-scrape-pg.py

      - name: Review Current Top Stories
        run: |
          bin/stories.markdown.sh >> "$GITHUB_STEP_SUMMARY"

      - name: Compose subject line
        run: bin/compose-subject-line.sh

      - name: Compose email payload
        run: |
          stories=$(bin/stories.json.sh)
          prettydate="$(TZ=Asia/Bangkok date "+%A, %d %b %Y")"
          exactdatetime="$(TZ=Asia/Bangkok date "+%Y-%m-%d %H:%M:%S")"

          echo "{
            \"stories\": ${stories},
            \"prettydate\":\"${prettydate}\",
            \"exactdatetime\":\"${exactdatetime}\"
          }" \
          | mustache mustache/hackernews.diyjest.mustache.html > digest.html

          echo "{
            \"stories\": ${stories},
            \"prettydate\":\"${prettydate}\",
            \"exactdatetime\":\"${exactdatetime}\"
          }" \
          | mustache mustache/hackernews.diyjest.mustache.txt > digest.plaintext

      - name: Read sent.yml
        id: read_yaml
        uses: actions-tools/yaml-outputs@v2
        with:
          file-path: 'sent.yml'

      - name: Should we send the mail now
        run: |
          HOUR_NOW=$(TZ=Asia/Bangkok date +%H)
          HOUR_NOW_UTC=$(date +%H)
          TODAY="$(TZ=Asia/Bangkok date +%Y%m%d)"
          EMAIL_SENT_TODAY="$(bin/email-already-sent-today.sh ${TODAY})'

          if [[ "$TARGET_HOUR" == "$HOUR_NOW" && "$EMAIL_SENT_TODAY" != "0" ]]; then
            SEND_MAIL="true"
          else
            SEND_MAIL="false"
          fi

          echo "SEND_MAIL=${SEND_MAIL}" >> "$GITHUB_ENV"

          cat <<DEBUG_EMAIL_SCHEDULE >> "$GITHUB_STEP_SUMMARY"

          Email schedule info

          - Email(s) Sent Today: ${EMAIL_SENT_TODAY}
          - Today: ${TODAY}
          - Target Hour: ${TARGET_HOUR}
          - Target Hour (UTC): ${TARGET_HOUR_UTC}
          - Current Hour: ${HOUR_NOW}
          - Current Hour (UTC): ${HOUR_NOW_UTC}
          - SEND_MAIL: ${SEND_MAIL}

          DEBUG_EMAIL_SCHEDULE

      - name: Debug SEND_MAIL
        run: |
          cat <<DEBUG >> "$GITHUB_STEP_SUMMARY"

          # Debug SEND_MAIL

          - inputs.send-email: ${{ inputs.send-email  }}
          - env.SEND_MAIL: ${{ env.SEND_MAIL }}
          - env.SEND_MAIL == 'true': ${{ env.SEND_MAIL == 'true' }}
          - env.SEND_MAIL == 'true" || inputs.send-email == 'yes please': ${{ env.SEND_MAIL == 'true' || inputs.send-email == 'yes please' }}

          DEBUG

      - name: Email HackerNews DIYgest
        id: sending_email
        if: env.SEND_MAIL == 'true' || inputs.send-email == 'yes please'
        uses: dawidd6/action-send-mail@v3
        with:
          subject: ${{ env.SUBJECT_LINE }}
          from: HackerNews DIYgest
          to: ${{secrets.GMAIL_USER}}
          username: ${{secrets.GMAIL_USER}}
          password: ${{secrets.GM_APPWRD}}
          body: file://digest.plaintext
          html_body: file://digest.html
          server_address: smtp.gmail.com
          server_port: 465
          secure: true
          ignore_cert: true
          priority: high

      - name: Confirm sent
        if: ${{ success() }}
        run: |
          today=$(TZ=Asia/Bangkok date +%Y%m%d)
          bin/email-sent-event.sh $today
